package service;

public class FaturamentoService {

	private static final Logger LOG = LoggerFactory.getLogger(FaturamentoService.class);

    @Autowired
    Faturamento integration;

    @Autowired
    Util util;

    @RequestMapping("/")
    public String faturarPedido() {
        return "{\"timestamp\":\"" + new Date() + "\",\"content\":\"Hello from EmitirNFSaidaAPi\"}";
    }
    
    @RequestMapping("/faturarpedido/{pedidoId}")
    public ResponseEntity<NotaFiscal> faturarPedido(@PathVariable int pedidoId) {

        // 1. First get mandatory product information
        ResponseEntity<NotaFiscal> notaFiscalResult = integration.emitirNFSaida(pedidoId);

        if (!productResult.getStatusCode().is2xxSuccessful()) {
            // We can't proceed, return whatever fault we got from the getProduct call
            return util.createResponse(null, notaFiscalResult.getStatusCode());
        }

        // 2. Get optional recommendations
        List<Recommendation> recommendations = null;
        try {
            ResponseEntity<List<Recommendation>> recommendationResult = integration.getRecommendations(productId);
            if (!recommendationResult.getStatusCode().is2xxSuccessful()) {
                // Something went wrong with getRecommendations, simply skip the recommendation-information in the response
                LOG.debug("Call to getRecommendations failed: {}", recommendationResult.getStatusCode());
            } else {
                recommendations = recommendationResult.getBody();
            }
        } catch (Throwable t) {
            LOG.error("getProduct erro ", t);
            throw t;
        }


        // 3. Get optional reviews
        ResponseEntity<List<Review>> reviewsResult = integration.getReviews(productId);
        List<Review> reviews = null;
        if (!reviewsResult.getStatusCode().is2xxSuccessful()) {
            // Something went wrong with getReviews, simply skip the review-information in the response
            LOG.debug("Call to getReviews failed: {}", reviewsResult.getStatusCode());
        } else {
            reviews = reviewsResult.getBody();
        }

        return util.createOkResponse(notaFiscalResult);
    }
}
